ordis_co_il_usr@vxaorzmkzo:~/www/edahouse.ordis.co.il$ # Check what's actually in the built dist/index.js file for Neon references
grep -n "neondatabase\|neon\|443" dist/index.js | head -10

# Check the current db-universal.ts content
echo "Current db-universal.ts:"
cat server/db-universal.ts

# Check the db.ts content
echo -e "\nCurrent db.ts:"
cat server/db.ts

# Check for any other database files that might be causing the issue
echo -e "\nLooking for all database files:"
find server/ -name "*db*" -type f

# Check if there are imports from different database files
echo -e "\nChecking imports in key server files:"
grep -n "from.*db" server/storage.ts server/routes.ts server/auth.ts | head -10

# Most importantly - check if the built application still contains Neon
echo -e "\nChecking if Neon is still in the built application:"
strings dist/index.js | grep -i neon | head -5
244:  authPageFeature2: varchar("auth_page_feature2", { length: 255 }).default("\u0411\u044B\u0441\u0442\u0440\u0430\u044F \u0434\u043E\u0441\u0442\u0430\u0432\u043A\u0430 \u0432 \u0443\u0434\u043E\u0431\u043D\u043E\u0435 \u0432\u0440\u0435\u043C\u044F"),
245:  authPageFeature3: varchar("auth_page_feature3", { length: 255 }).default("\u0428\u0438\u0440\u043E\u043A\u0438\u0439 \u0432\u044B\u0431\u043E\u0440 \u0431\u043B\u044E\u0434 \u043D\u0430 \u043B\u044E\u0431\u043E\u0439 \u0432\u043A\u0443\u0441"),
455:  whatsappMessage: text("whatsapp_message").default("\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435! \u0423 \u043C\u0435\u043D\u044F \u0435\u0441\u0442\u044C \u0432\u043E\u043F\u0440\u043E\u0441 \u043F\u043E \u0437\u0430\u043A\u0430\u0437\u0443."),
668:  whatsappMessage: z.string().nullable().transform((val) => val || "\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435! \u0423 \u043C\u0435\u043D\u044F \u0435\u0441\u0442\u044C \u0432\u043E\u043F\u0440\u043E\u0441 \u043F\u043E \u0437\u0430\u043A\u0430\u0437\u0443.")
676:import { Pool, neonConfig } from "@neondatabase/serverless";
677:import { drizzle } from "drizzle-orm/neon-serverless";
679:neonConfig.webSocketConstructor = ws;
1742:        return res.status(400).json({ message: "\u0418\u043C\u044F \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u0443\u0436\u0435 \u0437\u0430\u043D\u044F\u0442\u043E" });
1747:          return res.status(400).json({ message: "Email \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043E\u0432\u0430\u043D" });
1897:        delivering: "\u0412\u0430\u0448 \u0437\u0430\u043A\u0430\u0437 \u0432 \u043F\u0443\u0442\u0438",
Current db-universal.ts:
// Универсальное подключение к базе данных для Replit (Neon) и VPS (PostgreSQL)
import * as schema from "@shared/schema";

let db: any;
let pool: any;

// Определяем тип базы данных по URL
const isDevelopment = process.env.NODE_ENV === 'development';
const isNeonDatabase = process.env.DATABASE_URL?.includes('neon.tech');

if (isNeonDatabase) {
  // Для Neon (Replit)
  const { Pool, neonConfig } = await import('@neondatabase/serverless');
  const { drizzle } = await import('drizzle-orm/neon-serverless');
  const ws = await import('ws');

  neonConfig.webSocketConstructor = ws.default;
  pool = new Pool({ connectionString: process.env.DATABASE_URL });
  db = drizzle({ client: pool, schema });
} else {
  // Для обычного PostgreSQL (VPS)
  const pg = await import('pg');
  const { drizzle } = await import('drizzle-orm/node-postgres');

  pool = new pg.default.Pool({ connectionString: process.env.DATABASE_URL });
  db = drizzle({ client: pool, schema });
}

if (!process.env.DATABASE_URL) {
  throw new Error(
    "DATABASE_URL must be set. Did you forget to provision a database?",
  );
}

export { db, pool };
Current db.ts:
import { Pool, neonConfig } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import ws from "ws";
import * as schema from "@shared/schema";

neonConfig.webSocketConstructor = ws;

if (!process.env.DATABASE_URL) {
  throw new Error(
    "DATABASE_URL must be set. Did you forget to provision a database?",
  );
}

export const pool = new Pool({ connectionString: process.env.DATABASE_URL });
export const db = drizzle({ client: pool, schema });
Looking for all database files:
server/db-universal.ts
server/db.ts

Checking imports in key server files:
server/storage.ts:35:import { db } from "./db";
server/routes.ts:4:import { db } from "./db";
server/auth.ts:10:import { pool } from "./db";

Checking if Neon is still in the built application:
import { Pool, neonConfig } from "@neondatabase/serverless";
import { drizzle } from "drizzle-orm/neon-serverless";
neonConfig.webSocketConstructor = ws;
ordis_co_il_usr@vxaorzmkzo:~/www/edahouse.ordis.co.il$
