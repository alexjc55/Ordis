import fs from 'fs';
import path from 'path';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞
function readJsonFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(content);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞ (–≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ)
function getAllKeys(obj, prefix = '') {
  let keys = [];
  for (const key in obj) {
    const fullKey = prefix ? `${prefix}.${key}` : key;
    if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {
      keys = keys.concat(getAllKeys(obj[key], fullKey));
    } else {
      keys.push(fullKey);
    }
  }
  return keys.sort();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function analyzeTranslations() {
  const languages = ['ru', 'en', 'he'];
  const files = ['common.json', 'shop.json', 'admin.json'];
  const basePath = 'client/src/locales';

  console.log('=== –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í –ü–ï–†–ï–í–û–î–û–í ===\n');

  for (const file of files) {
    console.log(`\nüìÅ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: ${file}`);
    console.log('='.repeat(50));

    const languageData = {};
    const allKeys = new Set();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
    for (const lang of languages) {
      const filePath = path.join(basePath, lang, file);
      const data = readJsonFile(filePath);
      if (data) {
        languageData[lang] = data;
        const keys = getAllKeys(data);
        keys.forEach(key => allKeys.add(key));
        console.log(`${lang.toUpperCase()}: ${keys.length} –∫–ª—é—á–µ–π`);
      }
    }

    const totalKeys = allKeys.size;
    console.log(`\n–í–°–ï–ì–û –£–ù–ò–ö–ê–õ–¨–ù–´–• –ö–õ–Æ–ß–ï–ô: ${totalKeys}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
    const missingKeys = {};
    for (const lang of languages) {
      if (languageData[lang]) {
        const langKeys = new Set(getAllKeys(languageData[lang]));
        const missing = [...allKeys].filter(key => !langKeys.has(key));
        missingKeys[lang] = missing;
        
        if (missing.length > 0) {
          console.log(`\n‚ùå ${lang.toUpperCase()} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ${missing.length} –∫–ª—é—á–µ–π:`);
          missing.forEach(key => console.log(`   - ${key}`));
        } else {
          console.log(`\n‚úÖ ${lang.toUpperCase()} - –≤—Å–µ –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –∫–ª—é—á–∏
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –∫–ª—é—á–µ–π:');
    for (const lang of languages) {
      if (languageData[lang]) {
        const langKeys = getAllKeys(languageData[lang]);
        const extras = langKeys.filter(key => {
          return !languages.some(otherLang => {
            if (otherLang === lang || !languageData[otherLang]) return false;
            const otherKeys = new Set(getAllKeys(languageData[otherLang]));
            return otherKeys.has(key);
          });
        });
        
        if (extras.length > 0) {
          console.log(`‚ö†Ô∏è  ${lang.toUpperCase()} - –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –∫–ª—é—á–∏ (${extras.length}):`);
          extras.forEach(key => console.log(`   + ${key}`));
        }
      }
    }
  }

  // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('\n\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
  console.log('='.repeat(50));
  
  let totalAllKeys = 0;
  let totalMissingKeys = 0;
  
  for (const file of files) {
    const languageData = {};
    const allKeys = new Set();

    for (const lang of languages) {
      const filePath = path.join(basePath, lang, file);
      const data = readJsonFile(filePath);
      if (data) {
        languageData[lang] = data;
        const keys = getAllKeys(data);
        keys.forEach(key => allKeys.add(key));
      }
    }

    totalAllKeys += allKeys.size;

    for (const lang of languages) {
      if (languageData[lang]) {
        const langKeys = new Set(getAllKeys(languageData[lang]));
        const missing = [...allKeys].filter(key => !langKeys.has(key));
        totalMissingKeys += missing.length;
      }
    }
  }

  console.log(`–í—Å–µ–≥–æ –∫–ª—é—á–µ–π –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö: ${totalAllKeys}`);
  console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π: ${totalMissingKeys}`);
  console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${((totalAllKeys * 3 - totalMissingKeys) / (totalAllKeys * 3) * 100).toFixed(1)}%`);

  if (totalMissingKeys === 0) {
    console.log('\nüéâ –í–°–ï –§–ê–ô–õ–´ –ü–ï–†–ï–í–û–î–û–í –ü–û–õ–ù–û–°–¢–¨–Æ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–´!');
  } else {
    console.log('\n‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢–°–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –§–ê–ô–õ–û–í –ü–ï–†–ï–í–û–î–û–í');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeTranslations();